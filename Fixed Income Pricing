import streamlit as st
import pandas as pd
import numpy as np
from datetime import date, datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns

class BondPricingModel:
    def __init__(self, face_value, coupon_rate, maturity_years, market_rate, payment_freq=1):
        self.face_value = face_value
        self.coupon_rate = coupon_rate
        self.maturity_years = maturity_years
        self.market_rate = market_rate
        self.payment_freq = payment_freq

    def price(self):
        """ Calculate bond price using present value of future cash flows. """
        cash_flows = [self.coupon_rate * self.face_value / self.payment_freq] * (self.maturity_years * self.payment_freq)
        cash_flows[-1] += self.face_value  # Add face value to the last payment
        discount_factors = [(1 + self.market_rate / self.payment_freq) ** -(i+1) for i in range(len(cash_flows))]
        price = sum([cf * df for cf, df in zip(cash_flows, discount_factors)])
        return round(price, 2)

    def duration(self):
        """ Calculate Macaulay duration. """
        cash_flows = [self.coupon_rate * self.face_value / self.payment_freq] * (self.maturity_years * self.payment_freq)
        cash_flows[-1] += self.face_value  # Add face value to the last payment
        discount_factors = [(1 + self.market_rate / self.payment_freq) ** -(i+1) for i in range(len(cash_flows))]
        weighted_cash_flows = [(i+1) * cf * df for i, (cf, df) in enumerate(zip(cash_flows, discount_factors))]
        macaulay_duration = sum(weighted_cash_flows) / self.price()
        modified_duration = macaulay_duration / (1 + self.market_rate / self.payment_freq)
        return round(modified_duration, 3)

    def convexity(self):
        """ Calculate bond convexity. """
        cash_flows = [self.coupon_rate * self.face_value / self.payment_freq] * (self.maturity_years * self.payment_freq)
        cash_flows[-1] += self.face_value  # Add face value to the last payment
        discount_factors = [(1 + self.market_rate / self.payment_freq) ** -(i+1) for i in range(len(cash_flows))]
        weighted_cash_flows = [(i+1)*(i+2) * cf * df for i, (cf, df) in enumerate(zip(cash_flows, discount_factors))]
        convexity = sum(weighted_cash_flows) / ((self.price() * (self.market_rate / self.payment_freq)**2))
        return round(convexity, 3)

def main():
    st.set_page_config(layout="wide")
    st.sidebar.markdown("<h1 style='text-align: left;'>Bond Pricing Calculator</h1>", unsafe_allow_html=True)

    face_value = st.sidebar.number_input("Face Value", value=1000.0, step=100.0, format="%0.1f")
    coupon_rate = st.sidebar.number_input("Coupon Rate (%)", value=5.0, step=0.1, format="%0.2f") / 100
    maturity_years = st.sidebar.number_input("Years to Maturity", value=10, step=1)
    market_rate = st.sidebar.number_input("Market Interest Rate (%)", value=3.0, step=0.1, format="%0.2f") / 100
    payment_freq = st.sidebar.selectbox("Payment Frequency", [1, 2, 4], index=0)

    bond = BondPricingModel(face_value, coupon_rate, maturity_years, market_rate, payment_freq)
    bond_price = bond.price()
    bond_duration = bond.duration()
    bond_convexity = bond.convexity()

    st.metric(label="Bond Price", value=bond_price)
    st.metric(label="Duration", value=bond_duration)
    st.metric(label="Convexity", value=bond_convexity)

if __name__ == "__main__":
    main()

